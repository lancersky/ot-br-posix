// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_flag.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_feature_5fflag_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_feature_5fflag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_feature_5fflag_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_feature_5fflag_2eproto {
  static const uint32_t offsets[];
};
namespace otbr {
class FeatureFlagList;
struct FeatureFlagListDefaultTypeInternal;
extern FeatureFlagListDefaultTypeInternal _FeatureFlagList_default_instance_;
}  // namespace otbr
PROTOBUF_NAMESPACE_OPEN
template<> ::otbr::FeatureFlagList* Arena::CreateMaybeMessage<::otbr::FeatureFlagList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace otbr {

enum ProtoLogLevel : int {
  PROTO_LOG_UNSPECIFIED = 0,
  PROTO_LOG_EMERG = 1,
  PROTO_LOG_ALERT = 2,
  PROTO_LOG_CRIT = 3,
  PROTO_LOG_ERR = 4,
  PROTO_LOG_WARNING = 5,
  PROTO_LOG_NOTICE = 6,
  PROTO_LOG_INFO = 7,
  PROTO_LOG_DEBUG = 8
};
bool ProtoLogLevel_IsValid(int value);
constexpr ProtoLogLevel ProtoLogLevel_MIN = PROTO_LOG_UNSPECIFIED;
constexpr ProtoLogLevel ProtoLogLevel_MAX = PROTO_LOG_DEBUG;
constexpr int ProtoLogLevel_ARRAYSIZE = ProtoLogLevel_MAX + 1;

const std::string& ProtoLogLevel_Name(ProtoLogLevel value);
template<typename T>
inline const std::string& ProtoLogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProtoLogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProtoLogLevel_Name.");
  return ProtoLogLevel_Name(static_cast<ProtoLogLevel>(enum_t_value));
}
bool ProtoLogLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProtoLogLevel* value);
// ===================================================================

class FeatureFlagList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:otbr.FeatureFlagList) */ {
 public:
  inline FeatureFlagList() : FeatureFlagList(nullptr) {}
  ~FeatureFlagList() override;
  explicit PROTOBUF_CONSTEXPR FeatureFlagList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeatureFlagList(const FeatureFlagList& from);
  FeatureFlagList(FeatureFlagList&& from) noexcept
    : FeatureFlagList() {
    *this = ::std::move(from);
  }

  inline FeatureFlagList& operator=(const FeatureFlagList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureFlagList& operator=(FeatureFlagList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeatureFlagList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeatureFlagList* internal_default_instance() {
    return reinterpret_cast<const FeatureFlagList*>(
               &_FeatureFlagList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeatureFlagList& a, FeatureFlagList& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureFlagList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureFlagList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeatureFlagList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeatureFlagList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeatureFlagList& from);
  void MergeFrom(const FeatureFlagList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureFlagList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "otbr.FeatureFlagList";
  }
  protected:
  explicit FeatureFlagList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableNat64FieldNumber = 1,
    kEnableDetailedLoggingFieldNumber = 2,
    kEnableTrelFieldNumber = 4,
    kEnableDnsUpstreamQueryFieldNumber = 5,
    kEnableDhcp6PdFieldNumber = 6,
    kEnableLinkMetricsManagerFieldNumber = 7,
    kDetailedLoggingLevelFieldNumber = 3,
  };
  // optional bool enable_nat64 = 1 [default = false];
  bool has_enable_nat64() const;
  private:
  bool _internal_has_enable_nat64() const;
  public:
  void clear_enable_nat64();
  bool enable_nat64() const;
  void set_enable_nat64(bool value);
  private:
  bool _internal_enable_nat64() const;
  void _internal_set_enable_nat64(bool value);
  public:

  // optional bool enable_detailed_logging = 2 [default = false];
  bool has_enable_detailed_logging() const;
  private:
  bool _internal_has_enable_detailed_logging() const;
  public:
  void clear_enable_detailed_logging();
  bool enable_detailed_logging() const;
  void set_enable_detailed_logging(bool value);
  private:
  bool _internal_enable_detailed_logging() const;
  void _internal_set_enable_detailed_logging(bool value);
  public:

  // optional bool enable_trel = 4 [default = false];
  bool has_enable_trel() const;
  private:
  bool _internal_has_enable_trel() const;
  public:
  void clear_enable_trel();
  bool enable_trel() const;
  void set_enable_trel(bool value);
  private:
  bool _internal_enable_trel() const;
  void _internal_set_enable_trel(bool value);
  public:

  // optional bool enable_dns_upstream_query = 5 [default = false];
  bool has_enable_dns_upstream_query() const;
  private:
  bool _internal_has_enable_dns_upstream_query() const;
  public:
  void clear_enable_dns_upstream_query();
  bool enable_dns_upstream_query() const;
  void set_enable_dns_upstream_query(bool value);
  private:
  bool _internal_enable_dns_upstream_query() const;
  void _internal_set_enable_dns_upstream_query(bool value);
  public:

  // optional bool enable_dhcp6_pd = 6 [default = false];
  bool has_enable_dhcp6_pd() const;
  private:
  bool _internal_has_enable_dhcp6_pd() const;
  public:
  void clear_enable_dhcp6_pd();
  bool enable_dhcp6_pd() const;
  void set_enable_dhcp6_pd(bool value);
  private:
  bool _internal_enable_dhcp6_pd() const;
  void _internal_set_enable_dhcp6_pd(bool value);
  public:

  // optional bool enable_link_metrics_manager = 7 [default = false];
  bool has_enable_link_metrics_manager() const;
  private:
  bool _internal_has_enable_link_metrics_manager() const;
  public:
  void clear_enable_link_metrics_manager();
  bool enable_link_metrics_manager() const;
  void set_enable_link_metrics_manager(bool value);
  private:
  bool _internal_enable_link_metrics_manager() const;
  void _internal_set_enable_link_metrics_manager(bool value);
  public:

  // optional .otbr.ProtoLogLevel detailed_logging_level = 3 [default = PROTO_LOG_INFO];
  bool has_detailed_logging_level() const;
  private:
  bool _internal_has_detailed_logging_level() const;
  public:
  void clear_detailed_logging_level();
  ::otbr::ProtoLogLevel detailed_logging_level() const;
  void set_detailed_logging_level(::otbr::ProtoLogLevel value);
  private:
  ::otbr::ProtoLogLevel _internal_detailed_logging_level() const;
  void _internal_set_detailed_logging_level(::otbr::ProtoLogLevel value);
  public:

  // @@protoc_insertion_point(class_scope:otbr.FeatureFlagList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_nat64_;
    bool enable_detailed_logging_;
    bool enable_trel_;
    bool enable_dns_upstream_query_;
    bool enable_dhcp6_pd_;
    bool enable_link_metrics_manager_;
    int detailed_logging_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_feature_5fflag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeatureFlagList

// optional bool enable_nat64 = 1 [default = false];
inline bool FeatureFlagList::_internal_has_enable_nat64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_nat64() const {
  return _internal_has_enable_nat64();
}
inline void FeatureFlagList::clear_enable_nat64() {
  _impl_.enable_nat64_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FeatureFlagList::_internal_enable_nat64() const {
  return _impl_.enable_nat64_;
}
inline bool FeatureFlagList::enable_nat64() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_nat64)
  return _internal_enable_nat64();
}
inline void FeatureFlagList::_internal_set_enable_nat64(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_nat64_ = value;
}
inline void FeatureFlagList::set_enable_nat64(bool value) {
  _internal_set_enable_nat64(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_nat64)
}

// optional bool enable_detailed_logging = 2 [default = false];
inline bool FeatureFlagList::_internal_has_enable_detailed_logging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_detailed_logging() const {
  return _internal_has_enable_detailed_logging();
}
inline void FeatureFlagList::clear_enable_detailed_logging() {
  _impl_.enable_detailed_logging_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool FeatureFlagList::_internal_enable_detailed_logging() const {
  return _impl_.enable_detailed_logging_;
}
inline bool FeatureFlagList::enable_detailed_logging() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_detailed_logging)
  return _internal_enable_detailed_logging();
}
inline void FeatureFlagList::_internal_set_enable_detailed_logging(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enable_detailed_logging_ = value;
}
inline void FeatureFlagList::set_enable_detailed_logging(bool value) {
  _internal_set_enable_detailed_logging(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_detailed_logging)
}

// optional .otbr.ProtoLogLevel detailed_logging_level = 3 [default = PROTO_LOG_INFO];
inline bool FeatureFlagList::_internal_has_detailed_logging_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FeatureFlagList::has_detailed_logging_level() const {
  return _internal_has_detailed_logging_level();
}
inline void FeatureFlagList::clear_detailed_logging_level() {
  _impl_.detailed_logging_level_ = 7;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::otbr::ProtoLogLevel FeatureFlagList::_internal_detailed_logging_level() const {
  return static_cast< ::otbr::ProtoLogLevel >(_impl_.detailed_logging_level_);
}
inline ::otbr::ProtoLogLevel FeatureFlagList::detailed_logging_level() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.detailed_logging_level)
  return _internal_detailed_logging_level();
}
inline void FeatureFlagList::_internal_set_detailed_logging_level(::otbr::ProtoLogLevel value) {
  assert(::otbr::ProtoLogLevel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.detailed_logging_level_ = value;
}
inline void FeatureFlagList::set_detailed_logging_level(::otbr::ProtoLogLevel value) {
  _internal_set_detailed_logging_level(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.detailed_logging_level)
}

// optional bool enable_trel = 4 [default = false];
inline bool FeatureFlagList::_internal_has_enable_trel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_trel() const {
  return _internal_has_enable_trel();
}
inline void FeatureFlagList::clear_enable_trel() {
  _impl_.enable_trel_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool FeatureFlagList::_internal_enable_trel() const {
  return _impl_.enable_trel_;
}
inline bool FeatureFlagList::enable_trel() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_trel)
  return _internal_enable_trel();
}
inline void FeatureFlagList::_internal_set_enable_trel(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.enable_trel_ = value;
}
inline void FeatureFlagList::set_enable_trel(bool value) {
  _internal_set_enable_trel(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_trel)
}

// optional bool enable_dns_upstream_query = 5 [default = false];
inline bool FeatureFlagList::_internal_has_enable_dns_upstream_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_dns_upstream_query() const {
  return _internal_has_enable_dns_upstream_query();
}
inline void FeatureFlagList::clear_enable_dns_upstream_query() {
  _impl_.enable_dns_upstream_query_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool FeatureFlagList::_internal_enable_dns_upstream_query() const {
  return _impl_.enable_dns_upstream_query_;
}
inline bool FeatureFlagList::enable_dns_upstream_query() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_dns_upstream_query)
  return _internal_enable_dns_upstream_query();
}
inline void FeatureFlagList::_internal_set_enable_dns_upstream_query(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enable_dns_upstream_query_ = value;
}
inline void FeatureFlagList::set_enable_dns_upstream_query(bool value) {
  _internal_set_enable_dns_upstream_query(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_dns_upstream_query)
}

// optional bool enable_dhcp6_pd = 6 [default = false];
inline bool FeatureFlagList::_internal_has_enable_dhcp6_pd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_dhcp6_pd() const {
  return _internal_has_enable_dhcp6_pd();
}
inline void FeatureFlagList::clear_enable_dhcp6_pd() {
  _impl_.enable_dhcp6_pd_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool FeatureFlagList::_internal_enable_dhcp6_pd() const {
  return _impl_.enable_dhcp6_pd_;
}
inline bool FeatureFlagList::enable_dhcp6_pd() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_dhcp6_pd)
  return _internal_enable_dhcp6_pd();
}
inline void FeatureFlagList::_internal_set_enable_dhcp6_pd(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.enable_dhcp6_pd_ = value;
}
inline void FeatureFlagList::set_enable_dhcp6_pd(bool value) {
  _internal_set_enable_dhcp6_pd(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_dhcp6_pd)
}

// optional bool enable_link_metrics_manager = 7 [default = false];
inline bool FeatureFlagList::_internal_has_enable_link_metrics_manager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FeatureFlagList::has_enable_link_metrics_manager() const {
  return _internal_has_enable_link_metrics_manager();
}
inline void FeatureFlagList::clear_enable_link_metrics_manager() {
  _impl_.enable_link_metrics_manager_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FeatureFlagList::_internal_enable_link_metrics_manager() const {
  return _impl_.enable_link_metrics_manager_;
}
inline bool FeatureFlagList::enable_link_metrics_manager() const {
  // @@protoc_insertion_point(field_get:otbr.FeatureFlagList.enable_link_metrics_manager)
  return _internal_enable_link_metrics_manager();
}
inline void FeatureFlagList::_internal_set_enable_link_metrics_manager(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.enable_link_metrics_manager_ = value;
}
inline void FeatureFlagList::set_enable_link_metrics_manager(bool value) {
  _internal_set_enable_link_metrics_manager(value);
  // @@protoc_insertion_point(field_set:otbr.FeatureFlagList.enable_link_metrics_manager)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace otbr

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::otbr::ProtoLogLevel> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_feature_5fflag_2eproto
